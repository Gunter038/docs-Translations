"use strict";(self.webpackChunkcelestia_docs=self.webpackChunkcelestia_docs||[]).push([[1733],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=u(n),m=a,f=p["".concat(s,".").concat(m)]||p[m]||d[m]||o;return n?r.createElement(f,i(i({ref:t},c),{},{components:n})):r.createElement(f,i({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=p;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var u=2;u<o;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},8628:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return l},metadata:function(){return u},toc:function(){return d}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),i=["components"],l={},s=void 0,u={unversionedId:"nodes/config-toml",id:"nodes/config-toml",title:"config-toml",description:"- - -",source:"@site/i18n/es/docusaurus-plugin-content-docs/current/nodes/config-toml.md",sourceDirName:"nodes",slug:"/nodes/config-toml",permalink:"/es/nodes/config-toml",draft:!1,editUrl:"https://github.com/celestiaorg/docs/tree/main/docs/nodes/config-toml.md",tags:[],version:"current",frontMatter:{},sidebar:"nodes",previous:{title:"devops-resources",permalink:"/es/nodes/devops-resources"}},c={},d=[{value:"Pre-requisitos",id:"pre-requisitos",level:2},{value:"Entendiendo config.toml",id:"entendiendo-configtoml",level:2},{value:"Core",id:"core",level:3},{value:"P2P",id:"p2p",level:3},{value:"Bootstrap",id:"bootstrap",level:4},{value:"Mutual Peers",id:"mutual-peers",level:4},{value:"Services",id:"services",level:3},{value:"TrustedHash y TrustedPeer",id:"trustedhash-y-trustedpeer",level:4}],p={toc:d};function m(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("hr",null),(0,o.kt)("p",null,"sidebar_label : Gu\xeda de Config.toml"),(0,o.kt)("hr",null),(0,o.kt)("h1",{id:"desglose-de-configtoml"},"Desglose de Config.toml"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#configtoml-breakdown"},"Desglose de Config.toml"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#pre-requisites"},"Pre-Requisitos")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#understanding-configtoml"},"Entendiendo config.toml"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#core"},"[Core]")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#p2p"},"[P2P]"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#bootstrap"},"Bootstrap")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#mutual-peers"},"Mutual Peers")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#services"},"[Services]"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#trustedhash-and-trustedpeer"},"TrustedHash y Trusted Peer"))))))))),(0,o.kt)("h2",{id:"pre-requisitos"},"Pre-requisitos"),(0,o.kt)("p",null,"Por favor, aseg\xfarate de que has instalado e inicializado el nodo celestia"),(0,o.kt)("h2",{id:"entendiendo-configtoml"},"Entendiendo config.toml"),(0,o.kt)("p",null,"Despu\xe9s de la inicializaci\xf3n, para cualquier tipo de nodo, encontrar\xe1s un ",(0,o.kt)("inlineCode",{parentName:"p"},"config.toml")," en la siguiente ruta (ubicaci\xf3n predeterminada):"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"$HOME/.celestia-bridge/config.toml")," para nodo bridge"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"$HOME/.celestia-bridge/config.toml")," para nodo light")),(0,o.kt)("p",null,"Desglosemos algunas de las secciones m\xe1s utilizadas."),(0,o.kt)("h3",{id:"core"},"[Core]"),(0,o.kt)("p",null,"Esta secci\xf3n es necesaria para el Nodo Bridge de Celestia. Por defecto, ",(0,o.kt)("inlineCode",{parentName:"p"},"Remote = false"),". A\xfan para devnet, vamos a a usar la opci\xf3n de remote core y esto tambi\xe9n puede establecerse por la bandera de l\xednea de comandos ",(0,o.kt)("inlineCode",{parentName:"p"},"--core.remote"),"."),(0,o.kt)("h3",{id:"p2p"},"[P2P]"),(0,o.kt)("h4",{id:"bootstrap"},"Bootstrap"),(0,o.kt)("p",null,"Los Bootstrappers ayudan a los nuevos nodos a encontrar los pares m\xe1s r\xe1pido en la red. Por defecto, el ",(0,o.kt)("inlineCode",{parentName:"p"},"Bootstrapper = false")," y el ",(0,o.kt)("inlineCode",{parentName:"p"},"BootstrapPeers")," est\xe1 vac\xedo. Si deseas que tu nodo sea un Bootstrapper, entonces activa ",(0,o.kt)("inlineCode",{parentName:"p"},"Bootstrapper = true"),". ",(0,o.kt)("inlineCode",{parentName:"p"},"BootstrapPeers")," ya son proporcionados por defecto durante la inicializaci\xf3n. Si quieres a\xf1adir el tuyo manualmente, necesitas proporcionar las multidirecciones de los peers."),(0,o.kt)("h4",{id:"mutual-peers"},"Mutual Peers"),(0,o.kt)("p",null,"El prop\xf3sito de esta configuraci\xf3n es establecer una comunicaci\xf3n bidireccional. Este es generalmente el caso de Celestia Bridge Nodes. Adem\xe1s, necesitas cambiar el campo ",(0,o.kt)("inlineCode",{parentName:"p"},"PeerExchange")," de false a true."),(0,o.kt)("h3",{id:"services"},"[Services]"),(0,o.kt)("h4",{id:"trustedhash-y-trustedpeer"},"TrustedHash y TrustedPeer"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"TrustedHash")," es necesario para inicializar correctamente un Nodo Celestia Bridge con un ",(0,o.kt)("inlineCode",{parentName:"p"},"Remoto")," Nodo Celestia Core, ya ejecutado. El Nodo Light Celestia tomar\xe1 un hash de g\xe9nesis como el de confianza, si no se proporciona ning\xfan hash manualmente durante la fase de inicializaci\xf3n."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"TrustedPeers")," es el array de peers de Celestia Bridge Nodes en el que Light Node conf\xeda. Por defecto, los peers de bootstrap se convierten en pares de confianza para los nodos Celestia Light si un usuario no est\xe1 configurando los par\xe1metros de confianza en el archivo de configuraci\xf3n."),(0,o.kt)("p",null,"Cualquier Nodo Bridge de Celestia puede ser un par de confianza para el Light Node. Sin embargo, el nodo Light por dise\xf1o no puede ser un par de confianza para otro nodo Light."))}m.isMDXComponent=!0}}]);