"use strict";(self.webpackChunkcelestia_docs=self.webpackChunkcelestia_docs||[]).push([[4004],{3905:function(e,a,n){n.d(a,{Zo:function(){return d},kt:function(){return g}});var r=n(7294);function t(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function l(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);a&&(r=r.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?l(Object(n),!0).forEach((function(a){t(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function s(e,a){if(null==e)return{};var n,r,t=function(e,a){if(null==e)return{};var n,r,t={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],a.indexOf(n)>=0||(t[n]=e[n]);return t}(e,a);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(t[n]=e[n])}return t}var i=r.createContext({}),c=function(e){var a=r.useContext(i),n=a;return e&&(n="function"==typeof e?e(a):o(o({},a),e)),n},d=function(e){var a=c(e.components);return r.createElement(i.Provider,{value:a},e.children)},p={inlineCode:"code",wrapper:function(e){var a=e.children;return r.createElement(r.Fragment,{},a)}},u=r.forwardRef((function(e,a){var n=e.components,t=e.mdxType,l=e.originalType,i=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=c(n),g=t,k=u["".concat(i,".").concat(g)]||u[g]||p[g]||l;return n?r.createElement(k,o(o({ref:a},d),{},{components:n})):r.createElement(k,o({ref:a},d))}));function g(e,a){var n=arguments,t=a&&a.mdxType;if("string"==typeof e||t){var l=n.length,o=new Array(l);o[0]=u;var s={};for(var i in a)hasOwnProperty.call(a,i)&&(s[i]=a[i]);s.originalType=e,s.mdxType="string"==typeof e?e:t,o[1]=s;for(var c=2;c<l;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},7987:function(e,a,n){n.r(a),n.d(a,{assets:function(){return d},contentTitle:function(){return i},default:function(){return g},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return p}});var r=n(7462),t=n(3366),l=(n(7294),n(3905)),o=["components"],s={},i=void 0,c={unversionedId:"nodes/keys",id:"nodes/keys",title:"keys",description:"- - -",source:"@site/i18n/es/docusaurus-plugin-content-docs/current/nodes/keys.md",sourceDirName:"nodes",slug:"/nodes/keys",permalink:"/es/nodes/keys",draft:!1,editUrl:"https://github.com/celestiaorg/docs/tree/main/docs/nodes/keys.md",tags:[],version:"current",frontMatter:{},sidebar:"nodes",previous:{title:"systemd",permalink:"/es/nodes/systemd"},next:{title:"devops-resources",permalink:"/es/nodes/devops-resources"}},d={},p=[{value:"Instalaci\xf3n",id:"instalaci\xf3n",level:2},{value:"Pasos para generar claves de nodos <strong>bridge</strong>",id:"pasos-para-generar-claves-de-nodos-bridge",level:2},{value:"Pasos para generar claves de <strong>full</strong> nodes",id:"pasos-para-generar-claves-de-full-nodes",level:2},{value:"Pasos para generar claves de <strong>light</strong> nodes",id:"pasos-para-generar-claves-de-light-nodes",level:2},{value:"Pasos para exportar claves de <strong>light</strong> nodes",id:"pasos-para-exportar-claves-de-light-nodes",level:2}],u={toc:p};function g(e){var a=e.components,n=(0,t.Z)(e,o);return(0,l.kt)("wrapper",(0,r.Z)({},u,n,{components:a,mdxType:"MDXLayout"}),(0,l.kt)("hr",null),(0,l.kt)("p",null,"sidebar_label : Keys"),(0,l.kt)("hr",null),(0,l.kt)("h1",{id:"utilizando-la-utilidad-de-cel-key"},"Utilizando la utilidad de cel-key"),(0,l.kt)("p",null,"Dentro del repositorio de celestia-node se encuentra una utilidad llamada ",(0,l.kt)("inlineCode",{parentName:"p"},"cel-key")," que usa la utilidad key proporcionada por Cosmos-SDK bajo el cap\xf3. La utilidad puede ser usada para ",(0,l.kt)("inlineCode",{parentName:"p"},"a\xf1adir"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"borrar"),", y administrar las claves para cualquier nodo DA tipo ",(0,l.kt)("inlineCode",{parentName:"p"},"(bridge || full || light)"),", o simplemente claves en general."),(0,l.kt)("h2",{id:"instalaci\xf3n"},"Instalaci\xf3n"),(0,l.kt)("p",null,"Primero necesitas descargar el repositorio ",(0,l.kt)("inlineCode",{parentName:"p"},"celestia-node"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"git clone https://github.com/celestiaorg/celestia-node.git\ncd celestia-node/\n")),(0,l.kt)("p",null,"Se puede construir usando cualquiera de los siguientes comandos:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"# Muestra el binario en el directorio de trabajo actual, accesible a trav\xe9s de `./cel-key`\nmake cel-key\n")),(0,l.kt)("p",null,"o"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"# instala el binario en la ruta GOBIN, accesible a trav\xe9s de `cel-key`\nmake install-key\n")),(0,l.kt)("p",null,"Para el prop\xf3sito de esta gu\xeda, usaremos el comando ",(0,l.kt)("inlineCode",{parentName:"p"},"make cel-key"),"."),(0,l.kt)("h2",{id:"pasos-para-generar-claves-de-nodos-bridge"},"Pasos para generar claves de nodos ",(0,l.kt)("strong",{parentName:"h2"},"bridge")),(0,l.kt)("p",null,"Para generar una clave para un nodo de Celestia bridge, haz lo siguiente:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"./cel-key add <key_name> --keyring-backend test --node.type bridge\n")),(0,l.kt)("p",null,"Esto cargar\xe1 la clave <key_name> en el directorio del nodo bridge."),(0,l.kt)("h2",{id:"pasos-para-generar-claves-de-full-nodes"},"Pasos para generar claves de ",(0,l.kt)("strong",{parentName:"h2"},"full")," nodes"),(0,l.kt)("p",null,"Para generar una clave para un full node de Celestia, haz lo siguiente:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"./cel-key add <key_name> --keyring-backend test --node.type full\n")),(0,l.kt)("p",null,"Esto cargar\xe1 la clave <key_name> en el directorio de full node."),(0,l.kt)("h2",{id:"pasos-para-generar-claves-de-light-nodes"},"Pasos para generar claves de ",(0,l.kt)("strong",{parentName:"h2"},"light")," nodes"),(0,l.kt)("p",null,"Para generar una clave para un light node de Celestia, haz lo siguiente:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"./cel-key add <key_name> --keyring-backend test --node.type light\n")),(0,l.kt)("p",null,"Esto cargar\xe1 la clave <key_name> en el directorio del light node."),(0,l.kt)("h2",{id:"pasos-para-exportar-claves-de-light-nodes"},"Pasos para exportar claves de ",(0,l.kt)("strong",{parentName:"h2"},"light")," nodes"),(0,l.kt)("p",null,"Puedes exportar una clave privada desde el conjunto de claves local en formato cifrado y con formato ASCII."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"./cel-key export <key-name> --keyring-backend test --node.type light\n")),(0,l.kt)("p",null,"A continuaci\xf3n, puedes importar tu clave con ",(0,l.kt)("inlineCode",{parentName:"p"},"celestia-appd"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},"celestia-appd keys import <new-key-name> <key-file-location> \n")))}g.isMDXComponent=!0}}]);