"use strict";(self.webpackChunkcelestia_docs=self.webpackChunkcelestia_docs||[]).push([[2602],{3905:function(e,n,a){a.d(n,{Zo:function(){return d},kt:function(){return m}});var t=a(7294);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function o(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function i(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?o(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function l(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},o=Object.keys(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=t.createContext({}),c=function(e){var n=t.useContext(s),a=n;return e&&(a="function"==typeof e?e(n):i(i({},n),e)),a},d=function(e){var n=c(e.components);return t.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},p=t.forwardRef((function(e,n){var a=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=c(a),m=r,g=p["".concat(s,".").concat(m)]||p[m]||u[m]||o;return a?t.createElement(g,i(i({ref:n},d),{},{components:a})):t.createElement(g,i({ref:n},d))}));function m(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=p;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var c=2;c<o;c++)i[c]=a[c];return t.createElement.apply(null,i)}return t.createElement.apply(null,a)}p.displayName="MDXCreateElement"},1895:function(e,n,a){a.r(n),a.d(n,{assets:function(){return d},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return u}});var t=a(7462),r=a(3366),o=(a(7294),a(3905)),i=["components"],l={sidebar_label:"Configurar el entorno de red"},s="Configurando tu entorno para CosmWasm en Celestia",c={unversionedId:"developers/cosmwasm-environment",id:"developers/cosmwasm-environment",title:"Configurando tu entorno para CosmWasm en Celestia",description:"Ahora el binario wasmd est\xe1 compilado, necesitamos configurar una red local que comunique entre wasmd y Optimint.",source:"@site/i18n/es/docusaurus-plugin-content-docs/current/developers/cosmwasm-environment.md",sourceDirName:"developers",slug:"/developers/cosmwasm-environment",permalink:"/es/developers/cosmwasm-environment",draft:!1,editUrl:"https://github.com/celestiaorg/docs/tree/main/docs/developers/cosmwasm-environment.md",tags:[],version:"current",frontMatter:{sidebar_label:"Configurar el entorno de red"},sidebar:"developers",previous:{title:"Dependencias CosmWasm",permalink:"/es/developers/cosmwasm-dependency"},next:{title:"Despliegue del contrato",permalink:"/es/developers/cosmwasm-contract-deployment"}},d={},u=[{value:"Construyendo la red de Wasmd",id:"construyendo-la-red-de-wasmd",level:2},{value:"Iniciando la red Wasmd",id:"iniciando-la-red-wasmd",level:2}],p={toc:u};function m(e){var n=e.components,a=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,t.Z)({},p,a,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"configurando-tu-entorno-para-cosmwasm-en-celestia"},"Configurando tu entorno para CosmWasm en Celestia"),(0,o.kt)("p",null,"Ahora el binario ",(0,o.kt)("inlineCode",{parentName:"p"},"wasmd")," est\xe1 compilado, necesitamos configurar una red local que comunique entre ",(0,o.kt)("inlineCode",{parentName:"p"},"wasmd")," y Optimint."),(0,o.kt)("h2",{id:"construyendo-la-red-de-wasmd"},"Construyendo la red de Wasmd"),(0,o.kt)("p",null,"Ejecuta el siguiente comando:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"VALIDATOR_NAME=validator1\nCHAIN_ID=celeswasm\nwasmd init $VALIDATOR_NAME --chain-id $CHAIN_ID\n")),(0,o.kt)("p",null,"Esto inicializa una cadena llamada ",(0,o.kt)("inlineCode",{parentName:"p"},"celeswasm")," con ",(0,o.kt)("inlineCode",{parentName:"p"},"wasmd")," binario."),(0,o.kt)("p",null,"El siguiente comando nos ayuda a configurar cuentas para g\xe9nesis:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"KEY_NAME=celeswasm-key\nwasmd keys add $KEY_NAME --keyring-backend test\n")),(0,o.kt)("p",null,"Aseg\xfaratee de almacenar la salida de la wallet generada para referencia posterior si es necesario."),(0,o.kt)("p",null,"Ahora, vamos a a\xf1adir una cuenta de g\xe9nesis y utilizarla para actualizar nuestro archivo de g\xe9nesis:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},'TOKEN_AMOUNT="10000000000000000000000000uwasm"\nwasmd add-genesis-account $KEY_NAME $TOKEN_AMOUNT --keyring-backend test\nSTAKING_AMOUNT=1000000000uwasm\nwasmd gentx $KEY_NAME $STAKING_AMOUNT --chain-id $CHAIN_ID --keyring-backend test\n')),(0,o.kt)("p",null,"Con eso, creamos un archivo de g\xe9nesis de red local."),(0,o.kt)("p",null,"Algunos comandos m\xe1s \xfatiles que podemos configurar:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},'export NODE="--chain-id ${CHAIN_ID}"\nexport TXFLAG="--chain-id ${CHAIN_ID} --gas-prices 0uwasm --gas auto --gas-adjustment 1.3"\n')),(0,o.kt)("h2",{id:"iniciando-la-red-wasmd"},"Iniciando la red Wasmd"),(0,o.kt)("p",null,"Podemos ejecutar el siguiente c\xf3digo para iniciar la red de ",(0,o.kt)("inlineCode",{parentName:"p"},"wasmd"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},'wasmd start --optimint.aggregator true --optimint.da_layer celestia --optimint.da_config=\'{"base_url":"http://XXX.XXX.XXX.XXX:26658","timeout":60000000000,"gas_limit":6000000}\' --optimint.namespace_id 000000000000FFFF --optimint.da_start_height XXXXX\n')),(0,o.kt)("p",null,"Ten en cuenta que:"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"NOTA: En el comando anterior, necesitas pasar una direcci\xf3n IP del nodo Celestia al ",(0,o.kt)("inlineCode",{parentName:"p"},"base_url")," que tiene una cuenta con los tokens Arabica Devnet. Sigue el tutorial para configurar un Nodo Celestia Light y crear una wallet con dinero de la faucet de testnet ",(0,o.kt)("a",{parentName:"p",href:"/es/developers/node-tutorial"},"aqu\xed")," en la secci\xf3n de Celestia Node.")),(0,o.kt)("p",null,"Ten en cuenta que:"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"IMPORTANTE: Adem\xe1s, en el comando anterior, debes especificar la \xfaltima Altura del bloque en Arabica Devnet para ",(0,o.kt)("inlineCode",{parentName:"p"},"da_height"),". Puedes encontrar el \xfaltimo n\xfamero de bloque en el explorador ",(0,o.kt)("a",{parentName:"p",href:"https://explorer.celestia.observer/arabica"},"aqu\xed"),". Tambi\xe9n, para la bandera ",(0,o.kt)("inlineCode",{parentName:"p"},"--optimint.namespace_id"),", puedes generar un ID de nombre de dominio aleatorio usando el playground ",(0,o.kt)("a",{parentName:"p",href:"https://go.dev/play/p/7ltvaj8lhRl"},"aqu\xed"))),(0,o.kt)("p",null,"\xa1Con esto, hemos iniciado nuestra red de ",(0,o.kt)("inlineCode",{parentName:"p"},"wasmd"),"!"))}m.isMDXComponent=!0}}]);