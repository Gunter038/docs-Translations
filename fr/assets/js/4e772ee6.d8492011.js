"use strict";(self.webpackChunkcelestia_docs=self.webpackChunkcelestia_docs||[]).push([[4712],{3905:function(e,n,r){r.d(n,{Zo:function(){return d},kt:function(){return p}});var t=r(7294);function s(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function o(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function u(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?o(Object(r),!0).forEach((function(n){s(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function i(e,n){if(null==e)return{};var r,t,s=function(e,n){if(null==e)return{};var r,t,s={},o=Object.keys(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||(s[r]=e[r]);return s}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(s[r]=e[r])}return s}var a=t.createContext({}),l=function(e){var n=t.useContext(a),r=n;return e&&(r="function"==typeof e?e(n):u(u({},n),e)),r},d=function(e){var n=l(e.components);return t.createElement(a.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var r=e.components,s=e.mdxType,o=e.originalType,a=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),m=l(r),p=s,f=m["".concat(a,".").concat(p)]||m[p]||c[p]||o;return r?t.createElement(f,u(u({ref:n},d),{},{components:r})):t.createElement(f,u({ref:n},d))}));function p(e,n){var r=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var o=r.length,u=new Array(o);u[0]=m;var i={};for(var a in n)hasOwnProperty.call(n,a)&&(i[a]=n[a]);i.originalType=e,i.mdxType="string"==typeof e?e:s,u[1]=i;for(var l=2;l<o;l++)u[l]=r[l];return t.createElement.apply(null,u)}return t.createElement.apply(null,r)}m.displayName="MDXCreateElement"},9966:function(e,n,r){r.r(n),r.d(n,{assets:function(){return d},contentTitle:function(){return a},default:function(){return p},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return c}});var t=r(7462),s=r(3366),o=(r(7294),r(3905)),u=["components"],i={sidebar_label:"Gardien"},a="Les fonctions du Gardien",l={unversionedId:"developers/wordle-keeper",id:"developers/wordle-keeper",title:"Les fonctions du Gardien",description:"Maintenant, il est temps d'ajouter les fonctions du Gardien pour chaque message. \xc0 partir de la documentation du Cosmos-SDK, un Keeper est d\xe9fini de la fa\xe7on qui suit :",source:"@site/i18n/fr/docusaurus-plugin-content-docs/current/developers/wordle-keeper.md",sourceDirName:"developers",slug:"/developers/wordle-keeper",permalink:"/fr/developers/wordle-keeper",draft:!1,editUrl:"https://github.com/celestiaorg/docs/tree/main/docs/developers/wordle-keeper.md",tags:[],version:"current",frontMatter:{sidebar_label:"Gardien"},sidebar:"developers",previous:{title:"Types",permalink:"/fr/developers/wordle-types"},next:{title:"Ex\xe9cuter la chaine Wordle",permalink:"/fr/developers/run-wordle"}},d={},c=[{value:"Fonction SubmitWordle",id:"fonction-submitwordle",level:2},{value:"La fonction SubmitGuess",id:"la-fonction-submitguess",level:2},{value:"Le fichier Protobuf",id:"le-fichier-protobuf",level:2}],m={toc:c};function p(e){var n=e.components,r=(0,s.Z)(e,u);return(0,o.kt)("wrapper",(0,t.Z)({},m,r,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"les-fonctions-du-gardien"},"Les fonctions du Gardien"),(0,o.kt)("p",null,"Maintenant, il est temps d'ajouter les fonctions du Gardien pour chaque message. \xc0 partir de la documentation du Cosmos-SDK, un ",(0,o.kt)("a",{parentName:"p",href:"https://docs.cosmos.network/master/building-modules/keeper.html"},"Keeper")," est d\xe9fini de la fa\xe7on qui suit :"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Le noyau principal d'un module Cosmos-SDK est une pi\xe8ce appel\xe9e le Gardien. Le gardien g\xe8re les int\xe9ractions avec le stockage, a des r\xe9f\xe9rences \xe0 d'autres gardiens pour les int\xe9ractions entre modules et contient la plupart des fonctionnalit\xe9s de base d'un module.")),(0,o.kt)("p",null,"Un Gardien est une abstraction sur Cosmos qui nous permet d'interagir avec le stockage de Key-Value et de changer l'\xe9tat de la blockchain."),(0,o.kt)("p",null,"Ici, il nous aidera \xe0 d\xe9finir la logique de chaque message que nous cr\xe9ons."),(0,o.kt)("h2",{id:"fonction-submitwordle"},"Fonction SubmitWordle"),(0,o.kt)("p",null,"Nous allons commencer avec la fonction ",(0,o.kt)("inlineCode",{parentName:"p"},"SubmitWordle"),"."),(0,o.kt)("p",null,"Ouvrez le fichier suivant : ",(0,o.kt)("inlineCode",{parentName:"p"},"x/wordle/keeper/msg_server_submit_wordle.go")),(0,o.kt)("p",null,"A l'int\xe9rieur de ce qui suit, ajoutez le code suivant, que nous allons \xe9tudier plus loin :"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'package keeper\n\nimport (\n  "context"\n  "crypto/sha256"\n  "encoding/hex"\n  "github.com/YazzyYaz/wordle/x/wordle/types"\n  sdk "github.com/cosmos/cosmos-sdk/types"\n  sdkerrors "github.com/cosmos/cosmos-sdk/types/errors"\n  "time"\n  "unicode"\n)\n\nfunc (k msgServer) SubmitWordle(goCtx context.Context, msg *types.MsgSubmitWordle) (*types.MsgSubmitWordleResponse, error) {\n  ctx := sdk.UnwrapSDKContext(goCtx)\n  // Check to See the Wordle is 5 letters\n  if len(msg.Word) != 5 {\n    return nil, sdkerrors.Wrap(sdkerrors.ErrInvalidRequest, "Wordle Must Be A 5 Letter Word")\n  }\n  // Check to See Only Alphabets Are Passed for the Wordle\n  if !(IsLetter(msg.Word)) {\n    return nil, sdkerrors.Wrap(sdkerrors.ErrInvalidRequest, "Wordle Must Only Consist Of Letters In The Alphabet")\n  }\n\n  // Use Current Day to Create The Index of the Newly-Submitted Wordle of the Day\n  currentTime := time.Now().Local()\n  var currentTimeBytes = []byte(currentTime.Format("2006-01-02"))\n  var currentTimeHash = sha256.Sum256(currentTimeBytes)\n  var currentTimeHashString = hex.EncodeToString(currentTimeHash[:])\n  // Hash The Newly-Submitted Wordle of the Day\n  var submittedSolutionHash = sha256.Sum256([]byte(msg.Word))\n  var submittedSolutionHashString = hex.EncodeToString(submittedSolutionHash[:])\n\n  var wordle = types.Wordle{\n    Index:     currentTimeHashString,\n    Word:      submittedSolutionHashString,\n    Submitter: msg.Creator,\n  }\n\n  // Try to Get Wordle From KV Store Using Current Day as Key\n  // This Helps ensure only one Wordle is submitted per day\n  _, isFound := k.GetWordle(ctx, currentTimeHashString)\n  if isFound {\n    return nil, sdkerrors.Wrap(sdkerrors.ErrInvalidRequest, "Wordle of the Day is Already Submitted")\n  }\n  // Write Wordle to KV Store\n  k.SetWordle(ctx, wordle)\n  return &types.MsgSubmitWordleResponse{}, nil\n}\n\nfunc IsLetter(s string) bool {\n  for _, r := range s {\n    if !unicode.IsLetter(r) {\n      return false\n    }\n  }\n  return true\n}\n')),(0,o.kt)("p",null,"Ici, dans la fonction du Gardien ",(0,o.kt)("inlineCode",{parentName:"p"},"SubmitWordle"),", nous allons faire certaines choses :"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Nous nous assurons d'abord que le mot soumis pour le mot du jour est long de 5 caract\xe8res et qu'il n'utilise que des lettres. Cela signifie qu'aucun nombre entier ne peut \xeatre \xeatre soumis dans la chaine."),(0,o.kt)("li",{parentName:"ul"},"Nous cr\xe9ons ensuite un hash \xe0 partir du jour en cours au moment o\xf9 le mot a \xe9t\xe9 soumis. Nous pla\xe7ons ce hash \xe0 l'index du type du Wordle. Cela nous permet de rechercher toutes les suppositions de ce mot pour les jeux suivants, que nous allons \xe9tudier ensuite."),(0,o.kt)("li",{parentName:"ul"},"Nous v\xe9rifions ensuite si l'index de la date du jour est actuellement vide ou non. S'il n'est pas vide, cela signifie qu'un mot a d\xe9j\xe0 \xe9t\xe9 soumis. Rappelez-vous qu'un seul mot seulement peut \xeatre soumis chaque jour. Tout le monde doit deviner le mot soumis."),(0,o.kt)("li",{parentName:"ul"},"Nous avons \xe9galement une fonction d'aide pour v\xe9rifier si une chaine de caract\xe8res contient seulement des caract\xe8res alphab\xe9tiques.")),(0,o.kt)("h2",{id:"la-fonction-submitguess"},"La fonction SubmitGuess"),(0,o.kt)("p",null,"La prochaine fonction de Gardien que nous allons ajouter est la suivante : ",(0,o.kt)("inlineCode",{parentName:"p"},"x/wordle/keeper/msg_server_submit_guess.go")),(0,o.kt)("p",null,"Ouvrez ce fichier et ajoutez le code suivant, que nous allons expliquer un peu plus bas :"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'package keeper\n\nimport (\n  "context"\n  "crypto/sha256"\n  "encoding/hex"\n  "github.com/YazzyYaz/wordle/x/wordle/types"\n  sdk "github.com/cosmos/cosmos-sdk/types"\n  sdkerrors "github.com/cosmos/cosmos-sdk/types/errors"\n  "strconv"\n  "time"\n  "github.com/tendermint/tendermint/crypto"\n)\n\nfunc (k msgServer) SubmitGuess(goCtx context.Context, msg *types.MsgSubmitGuess) (*types.MsgSubmitGuessResponse, error) {\n  ctx := sdk.UnwrapSDKContext(goCtx)\n  // Check Word is 5 Characters Long\n  if len(msg.Word) != 5 {\n    return nil, sdkerrors.Wrap(sdkerrors.ErrInvalidRequest, "Guess Must Be A 5 Letter Word!")\n  }\n\n  // Check String Contains Alphabet Letters Only\n  if !(IsLetter(msg.Word)) {\n    return nil, sdkerrors.Wrap(sdkerrors.ErrInvalidRequest, "Guess Must Only Consist of Alphabet Letters!")\n  }\n\n  // Get Current Day to Pull Up Wordle of That Day As A Hash\n  currentTime := time.Now().Local()\n  var currentTimeBytes = []byte(currentTime.Format("2006-01-02"))\n  var currentTimeHash = sha256.Sum256(currentTimeBytes)\n  var currentTimeHashString = hex.EncodeToString(currentTimeHash[:])\n  wordle, isFound := k.GetWordle(ctx, currentTimeHashString)\n  if !isFound {\n    return nil, sdkerrors.Wrap(sdkerrors.ErrInvalidRequest, "Wordle of The Day Hasn\'t Been Submitted Yet.\n  }\n\n  // Check String Contains Alphabet Letters Only\n  if !(IsLetter(msg.Word)) {\n    return nil, sdkerrors.Wrap(sdkerrors.ErrInvalidRequest, "Guess Must Only Consist of Alphabet Letters!")\n  }\n\n  // Get Current Day to Pull Up Wordle of That Day As A Hash\n  currentTime := time.Now().Local()\n  var currentTimeBytes = []byte(currentTime.Format("2006-01-02"))\n  var currentTimeHash = sha256.Sum256(currentTimeBytes)\n  var currentTimeHashString = hex.EncodeToString(currentTimeHash[:])\n  wordle, isFound := k.GetWordle(ctx, currentTimeHashString)\n  if !isFound {\n    return nil, sdkerrors.Wrap(sdkerrors.ErrInvalidRequest, "Wordle of The Day Hasn\'t Been Submitted Yet. Feel Free to Submit One!")\n  Feel Free to Submit One!")\n  }\n\n  // We Convert Current Day and Guesser to A Hash To Use As An Index For Today\'s Guesses For That Guesser\n  // That Way, A Person Can Guess 6 Times A Day For Each New Wordle Created\n  var currentTimeGuesserBytes = []byte(currentTime.Format("2006-01-02") + msg.Creator)\n  var currentTimeGuesserHash = sha256.Sum256(currentTimeGuesserBytes)\n  var currentTimeGuesserHashString = hex.EncodeToString(currentTimeGuesserHash[:])\n  // Hash The Guess To The Wordle\n  var submittedSolutionHash = sha256.Sum256([]byte(msg.Word))\n  var submittedSolutionHashString = hex.EncodeToString(submittedSolutionHash[:])\n\n  // Get the Latest Guess entry for this Submitter for the current Wordle of the Day\n  var count int\n  guess, isFound := k.GetGuess(ctx, currentTimeGuesserHashString)\n  if isFound {\n    // Check if Submitter Reached 6 Tries\n    if guess.Count == strconv.Itoa(6) {\n      return nil, sdkerrors.Wrap(sdkerrors.ErrInvalidRequest, "You Have Guessed The Maximum Amount of Times for The Day! Try Again Tomorrow With A New Wordle.")\n    Try Again Tomorrow With A New Wordle.")\n    }\n    currentCount, err := strconv.Atoi(guess.Count)\n    if err != nil {\n      panic(err)\n    }\n    count = currentCount\n  } else {\n    // Initialize Count Value If No Entry Exists for this Submitter for Today\'s Wordle\n    count = 0\n  }\n  // Increment Guess Count\n  count += 1\n  var newGuess = types.Guess{\n    Index:     currentTimeGuesserHashString,\n    Submitter: msg.Creator,\n    Word:      submittedSolutionHashString,\n    Count:     strconv.Itoa(count),\n  }\n  // Remove Current Guess Entry to be Updated With New Entry\n  k.RemoveGuess(ctx, currentTimeGuesserHashString)\n  // Add New Guess Entry\n  k.SetGuess(ctx, newGuess)\n  // Setup Reward \n  reward := sdk.Coins{sdk.NewInt64Coin("WORDLE", 100)}\n  if !(wordle.Word == submittedSolutionHashString) {\n    return &types.MsgSubmitGuessResponse{Title: "Wrong Answer", Body: "Your Guess Was Wrong. Try Again"}, nil\n  } else {\n    // If Submitter Guesses Correctly\n    guesserAddress, _ := sdk.AccAddressFromBech32(msg.Creator)\n    moduleAcct := sdk.AccAddress(crypto.AddressHash([]byte(types.ModuleName)))\n    // Send Reward\n    k.bankKeeper.SendCoins(ctx, guesserAddress, moduleAcct, reward) \n    return &types.MsgSubmitGuessResponse{Title: "Correct", Body: "You Guessed The Wordle Correctly!"}, nil\n  }\n}\n')),(0,o.kt)("p",null,"Dans le code ci-dessus, nous effectuons les choses suivantes :"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Ici, nous effectuons des v\xe9rifications initiales sur le mot pour nous assurer qu'il est fait de 5 caract\xe8res uniquement alphab\xe9tiques, ce qui peut \xeatre refactoris\xe9 dans le futur ou v\xe9rifi\xe9 dans les commandes CLI."),(0,o.kt)("li",{parentName:"ul"},"Nous obtenons ensuite le mot du jour en r\xe9cup\xe9rant la chaine de hash du jour actuel."),(0,o.kt)("li",{parentName:"ul"},"Ensuite, nous cr\xe9ons une chaine de hash du jour courant et l'Emetteur. Cela nous permet de cr\xe9er un type pour les mots propos\xe9s avec un index qui utilise le jour actuel et l'adresse de l'\xe9metteur. Cela nous aide quand nous sommes confront\xe9s \xe0 un nouveau jour et qu'une adresse veut deviner ce nouveau mot. La configuration de l'index permet de continuer \xe0 essayer de deviner un nouveau mot chaque jour jusqu'\xe0 un maximum de 6 essais par jour."),(0,o.kt)("li",{parentName:"ul"},"Nous v\xe9rifions ensuite si le nombre d'essais de l'\xe9metteur a bien atteint 6 pour aujourd'hui. Si ce n'est pas le cas, il incr\xe9mente l'essai. Nous v\xe9rifions ensuite si la tentative est correcte. Nous stockons le mot essay\xe9 avec le nombre d'essais mis \xe0 jour.")),(0,o.kt)("h2",{id:"le-fichier-protobuf"},"Le fichier Protobuf"),(0,o.kt)("p",null,"  Quelques fichiers doivent \xeatre modifi\xe9s pour que cela fonctionne."),(0,o.kt)("p",null,"Le premier est ",(0,o.kt)("inlineCode",{parentName:"p"},"proto/wordle/tx.proto"),"."),(0,o.kt)("p",null,"Dans ce fichier, remplissez le ",(0,o.kt)("inlineCode",{parentName:"p"},"MsgSubmitGuessResponse")," vide avec le code suivant :"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"message MsgSubmitGuessResponse {\n  string title = 1;\n  string body = 2;\n}\n")),(0,o.kt)("p",null,"Le fichier suivant est : ",(0,o.kt)("inlineCode",{parentName:"p"},"x/wordle/types/expected_keepers.go")),(0,o.kt)("p",null,"Ici, nous avons besoin d'ajouter la m\xe9thode SendCoins \xe0 l'interface de BankKeeper afin de permettre l'envoi de r\xe9compense \xe0 la personne qui a devin\xe9."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"type BankKeeper interface {\n  SendCoins(ctx sdk.Context, fromAddr sdk.AccAddress, toAddr sdk.AccAddress, amt sdk.Coins) error\n}\n")),(0,o.kt)("p",null,"Avec cela, nous avons impl\xe9ment\xe9 toutes nos fonctions de Gardien ! Il est temps de compiler la blockchain et de l'exposer pour un galop d'essai."))}p.isMDXComponent=!0}}]);