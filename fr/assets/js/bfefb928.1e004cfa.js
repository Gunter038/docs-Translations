"use strict";(self.webpackChunkcelestia_docs=self.webpackChunkcelestia_docs||[]).push([[6968],{3905:function(e,r,t){t.d(r,{Zo:function(){return c},kt:function(){return f}});var n=t(7294);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function s(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function a(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?s(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function l(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},s=Object.keys(e);for(n=0;n<s.length;n++)t=s[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)t=s[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=n.createContext({}),i=function(e){var r=n.useContext(p),t=r;return e&&(t="function"==typeof e?e(r):a(a({},r),e)),t},c=function(e){var r=i(e.components);return n.createElement(p.Provider,{value:r},e.children)},u={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},d=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,s=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=i(t),f=o,m=d["".concat(p,".").concat(f)]||d[f]||u[f]||s;return t?n.createElement(m,a(a({ref:r},c),{},{components:t})):n.createElement(m,a({ref:r},c))}));function f(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var s=t.length,a=new Array(s);a[0]=d;var l={};for(var p in r)hasOwnProperty.call(r,p)&&(l[p]=r[p]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var i=2;i<s;i++)a[i]=t[i];return n.createElement.apply(null,a)}return n.createElement.apply(null,t)}d.displayName="MDXCreateElement"},4333:function(e,r,t){t.r(r),t.d(r,{assets:function(){return c},contentTitle:function(){return p},default:function(){return f},frontMatter:function(){return l},metadata:function(){return i},toc:function(){return u}});var n=t(7462),o=t(3366),s=(t(7294),t(3905)),a=["components"],l={sidebar_label:"Types"},p="Types de Wordle",i={unversionedId:"developers/wordle-types",id:"developers/wordle-types",title:"Types de Wordle",description:"Dans les prochaines \xe9tapes, nous allons cr\xe9er des types qui seront utilis\xe9s par les messages que nous avons cr\xe9\xe9s.",source:"@site/i18n/fr/docusaurus-plugin-content-docs/current/developers/wordle-types.md",sourceDirName:"developers",slug:"/developers/wordle-types",permalink:"/fr/developers/wordle-types",draft:!1,editUrl:"https://github.com/celestiaorg/docs/tree/main/docs/developers/wordle-types.md",tags:[],version:"current",frontMatter:{sidebar_label:"Types"},sidebar:"developers",previous:{title:"Messages",permalink:"/fr/developers/wordle-messages"},next:{title:"Gardien",permalink:"/fr/developers/wordle-keeper"}},c={},u=[{value:"Types de Scaffoling Wordle",id:"types-de-scaffoling-wordle",level:2}],d={toc:u};function f(e){var r=e.components,t=(0,o.Z)(e,a);return(0,s.kt)("wrapper",(0,n.Z)({},d,t,{components:r,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"types-de-wordle"},"Types de Wordle"),(0,s.kt)("p",null,"Dans les prochaines \xe9tapes, nous allons cr\xe9er des types qui seront utilis\xe9s par les messages que nous avons cr\xe9\xe9s."),(0,s.kt)("h2",{id:"types-de-scaffoling-wordle"},"Types de Scaffoling Wordle"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sh"},"ignite scaffold map wordle word submitter --no-message\n")),(0,s.kt)("p",null,"Ce type est une carte appel\xe9e ",(0,s.kt)("inlineCode",{parentName:"p"},"Wordle")," avec deux valeurs appel\xe9es ",(0,s.kt)("inlineCode",{parentName:"p"},"mot")," et ",(0,s.kt)("inlineCode",{parentName:"p"},"d\xe9posant"),". ",(0,s.kt)("inlineCode",{parentName:"p"},"submitter")," est l'adresse de la personne qui a soumis le mot."),(0,s.kt)("p",null,"Le second type est le type ",(0,s.kt)("inlineCode",{parentName:"p"},"Guess"),". Il nous permet de stocker la derni\xe8re estimation pour chaque adresse qui a soumis une solution."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sh"},"ignite scaffold map guess word submitter count --no-message\n")),(0,s.kt)("p",null,"Ici, nous allons \xe9galement stocker ",(0,s.kt)("inlineCode",{parentName:"p"},"count")," pour compter combien de guess cette adresse a soumis."))}f.isMDXComponent=!0}}]);