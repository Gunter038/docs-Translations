"use strict";(self.webpackChunkcelestia_docs=self.webpackChunkcelestia_docs||[]).push([[3808],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return g}});var r=t(7294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function u(e,n){if(null==e)return{};var t,r,l=function(e,n){if(null==e)return{};var t,r,l={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var i=r.createContext({}),s=function(e){var n=r.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=s(e.components);return r.createElement(i.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,l=e.mdxType,a=e.originalType,i=e.parentName,p=u(e,["components","mdxType","originalType","parentName"]),d=s(t),g=l,k=d["".concat(i,".").concat(g)]||d[g]||c[g]||a;return t?r.createElement(k,o(o({ref:n},p),{},{components:t})):r.createElement(k,o({ref:n},p))}));function g(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var a=t.length,o=new Array(a);o[0]=d;var u={};for(var i in n)hasOwnProperty.call(n,i)&&(u[i]=n[i]);u.originalType=e,u.mdxType="string"==typeof e?e:l,o[1]=u;for(var s=2;s<a;s++)o[s]=t[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},8836:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return i},default:function(){return g},frontMatter:function(){return u},metadata:function(){return s},toc:function(){return c}});var r=t(7462),l=t(3366),a=(t(7294),t(3905)),o=["components"],u={},i=void 0,s={unversionedId:"nodes/keys",id:"nodes/keys",title:"keys",description:"- - -",source:"@site/i18n/fr/docusaurus-plugin-content-docs/current/nodes/keys.md",sourceDirName:"nodes",slug:"/nodes/keys",permalink:"/fr/nodes/keys",draft:!1,editUrl:"https://github.com/celestiaorg/docs/tree/main/docs/nodes/keys.md",tags:[],version:"current",frontMatter:{},sidebar:"nodes",previous:{title:"systemd",permalink:"/fr/nodes/systemd"},next:{title:"devops-resources",permalink:"/fr/nodes/devops-resources"}},p={},c=[{value:"Installation",id:"installation",level:2},{value:"\xc9tapes pour g\xe9n\xe9rer une cl\xe9 de <strong>bridge</strong> node",id:"\xe9tapes-pour-g\xe9n\xe9rer-une-cl\xe9-de-bridge-node",level:2},{value:"\xc9tapes pour g\xe9n\xe9rer une cl\xe9 de <strong>full</strong> node",id:"\xe9tapes-pour-g\xe9n\xe9rer-une-cl\xe9-de-full-node",level:2},{value:"\xc9tapes pour g\xe9n\xe9rer une cl\xe9 de <strong>light</strong> node",id:"\xe9tapes-pour-g\xe9n\xe9rer-une-cl\xe9-de-light-node",level:2},{value:"\xc9tapes pour g\xe9n\xe9rer des cl\xe9s de <strong>light</strong> node",id:"\xe9tapes-pour-g\xe9n\xe9rer-des-cl\xe9s-de-light-node",level:2}],d={toc:c};function g(e){var n=e.components,t=(0,l.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("hr",null),(0,a.kt)("p",null,"sidebar_label : Cl\xe9s"),(0,a.kt)("hr",null),(0,a.kt)("h1",{id:"prise-en-main-de-lutilitaire-cel-key"},"Prise en main de l'utilitaire Cel-Key"),(0,a.kt)("p",null,"A l'int\xe9rieur du d\xe9p\xf4t du n\u0153ud Celestia se trouve un utilitaire appel\xe9 ",(0,a.kt)("inlineCode",{parentName:"p"},"cel-key")," qui utilise l'utilitaire de cl\xe9 fourni par le Cosmos-SDK et sa technologie. L'utilitaire peut \xeatre pour ",(0,a.kt)("inlineCode",{parentName:"p"},"add"),"(ajouter), ",(0,a.kt)("inlineCode",{parentName:"p"},"delete"),"(effacer) , et g\xe9rer les cl\xe9s pour tout type de node de Disponilit\xe9 de la donn\xe9e ",(0,a.kt)("inlineCode",{parentName:"p"},"(bridge || full || light)"),", ou juste des cl\xe9s en g\xe9n\xe9ral."),(0,a.kt)("h2",{id:"installation"},"Installation"),(0,a.kt)("p",null,'Vous devez d\'abord "pull down" le d\xe9p\xf4t ',(0,a.kt)("inlineCode",{parentName:"p"},"celestia-node"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"git clone https://github.com/celestiaorg/celestia-node.git\ncd celestia-node/\n")),(0,a.kt)("p",null,"Il peut \xeatre construit en utilisant l'une des commandes suivantes :"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"# dumps binary in current working directory, accessible via `./cel-key`\nmake cel-key\n")),(0,a.kt)("p",null,"ou"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"# installs binary in GOBIN path, accessible via `cel-key`\nmake install-key\n")),(0,a.kt)("p",null,"Dans le cadre de ce guide, nous utiliserons la commande ",(0,a.kt)("inlineCode",{parentName:"p"},"make cel-key"),"."),(0,a.kt)("h2",{id:"\xe9tapes-pour-g\xe9n\xe9rer-une-cl\xe9-de-bridge-node"},"\xc9tapes pour g\xe9n\xe9rer une cl\xe9 de ",(0,a.kt)("strong",{parentName:"h2"},"bridge")," node"),(0,a.kt)("p",null,"Pour g\xe9n\xe9rer une cl\xe9 pour un bridge node, proc\xe9dez comme ce qui suit :"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"./cel-key add <key_name> --keyring-backend test --node.type bridge\n")),(0,a.kt)("p",null,"Cela chargera la cl\xe9 <key_name> dans le r\xe9pertoire du Bridge node."),(0,a.kt)("h2",{id:"\xe9tapes-pour-g\xe9n\xe9rer-une-cl\xe9-de-full-node"},"\xc9tapes pour g\xe9n\xe9rer une cl\xe9 de ",(0,a.kt)("strong",{parentName:"h2"},"full")," node"),(0,a.kt)("p",null,"Pour g\xe9n\xe9rer une cl\xe9 pour un full node Celestia, proc\xe9dez comme suit :"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"./cel-key add <key_name> --keyring-backend test --node.type full\n")),(0,a.kt)("p",null,"Cela chargera la cl\xe9 <key_name> dans le r\xe9pertoire du full node."),(0,a.kt)("h2",{id:"\xe9tapes-pour-g\xe9n\xe9rer-une-cl\xe9-de-light-node"},"\xc9tapes pour g\xe9n\xe9rer une cl\xe9 de ",(0,a.kt)("strong",{parentName:"h2"},"light")," node"),(0,a.kt)("p",null,"Pour g\xe9n\xe9rer une cl\xe9 pour un light node Celestia, proc\xe9dez comme suit :"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"./cel-key add <key_name> --keyring-backend test --node.type light\n")),(0,a.kt)("p",null,"Cela chargera la cl\xe9 <key_name> dans le r\xe9pertoire du light node."),(0,a.kt)("h2",{id:"\xe9tapes-pour-g\xe9n\xe9rer-des-cl\xe9s-de-light-node"},"\xc9tapes pour g\xe9n\xe9rer des cl\xe9s de ",(0,a.kt)("strong",{parentName:"h2"},"light")," node"),(0,a.kt)("p",null,"Vous pouvez exporter une cl\xe9 priv\xe9e \xe0 partir du trousseau local au format crypt\xe9 et ASCII-armored."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"./cel-key export <key-name> --keyring-backend test --node.type light\n")),(0,a.kt)("p",null,"Vous pouvez ensuite importer votre cl\xe9 avec ",(0,a.kt)("inlineCode",{parentName:"p"},"celestia-appd"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"celestia-appd keys import <new-key-name> <key-file-location>\n")))}g.isMDXComponent=!0}}]);